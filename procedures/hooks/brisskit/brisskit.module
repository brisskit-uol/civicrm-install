<?php
/*
Module containing core BRISSkit logic by implementing CiviCRM hook pre and post database writing.
within this logic it invokes BRISSkit specific hooks for particular stages of the study enrolment process
these include:
 
 - participant_available - once participant has passed the automatic/manual check that they are not deceased (ie. the Check participant is available activity is complete) and their status is Available
   - in this module a set of 'contact participant' activities are added including 'Positive reply received'
 
 - letter_response - once participant has responded positively to the letter (ie. the Positive reply received activity is complete)
   - in this module the participant stub is sent to the i2b2 web service
   - for the 2 consent modules (brisskit_tissue and brisskit_datacol) each creates a Consent to.. activity (provided the case implements that ActivityType) with status pending

 - consent_success - once participant has given 'Accepted' as response to particular Consent to.. activity
   - in the brisskit_tissue module this triggers the participant stub to be sent to the caTissue web service and the recording of this with a 'Data transfer' activity
   - in the brisskit_datacol module this triggers the creation of an 'Phone Call' activity to 'Organise data collection appointment with participant' 
*/
include_once "lib/core.php";

#implement civi's civicrm_buildForm hook
#prevent users from adding participants to cases unless they have permission to contact participant
function brisskit_civicrm_buildForm($formName, &$form) {
# 2. The brisskit extension checks that permission has been given to do this before the form has been generated
  if ($formName == 'CRM_Case_Form_Case') {
    if ($form->getAction() == CRM_Core_Action::ADD) {
    	if ($form->controller->_actionName) {
	    	$contact_id = $form->_currentlyViewedContactId;
	    	if (!$contact_id) return;
	        $contact = get_contact_with_custom_values($contact_id);
	        
	        if (!isset($contact['permission_given']) || $contact['permission_given']==0) {
	        	drupal_set_message("Sorry, a participant cannot be enrolled in any studies until 'Permission to contact participant' has been set to 'Yes'","error");
	        	drupal_goto("civicrm/contact/view",array("reset"=>1,"cid"=>$contact_id));
	        }
    	}
    }
  }
}


#implement civi's civicrm_pre db write hook
function brisskit_civicrm_pre($op, $objectName, $id, &$params) {
	global $triggered;
	global $prev_stat_id;
	
	#if only viewing or deleting don't do anything
	if ($op=="view" || $op=="delete") return;
	
	# check if object is Individual or GroupContact

	#2. When the participant is saved the brisskit extension is triggered
	if ($objectName=="GroupContact" || $objectName=='Individual') {
		#try/catch will produce a nice drupal style message if there is a problem
		try {
			#check whether contact has permission or not
			$permission = is_permission_given_to_contact($params);
			
			if ($permission) {
				# 5. If the permission flag has been set properly the individual is pseudonymised
				#if so then pseudonymise the individual
				$bkid = pseudo_individual($params);
				drupal_set_message("Permission to contact the individual was given by GP/clinician - participant has now been pseudonymised (ID:".$bkid.")");
			}
			if ($op=="edit") {
				 $contact = get_contact_with_custom_values($params['contact_id']);
				 $prev_stat_id = isset($contact['status']) ? $contact['status'] : null;
			}
			
		}
		catch(Exception $ex) {
			drupal_set_message($ex->getMessage(),"error");	
		}
	}
	
	if ($objectName=='Activity') {
		#try/catch will produce a nice drupal style message if there is a problem

		try {
			#check if activity has already had workflow triggered
			if (is_triggered($params)) return;
			
			#check if contact has been added to case type previously (result of 'Open Case' activity)
			$case_type = is_added_to_duplicate_case($op, $_POST, $params);
			
			if ($case_type) {
				drupal_set_message("Sorry you can only add a contact to a study once. This contact has already been added to the '$case_type' Study","error");
				drupal_goto("civicrm/contact/view",array("reset"=>1,"cid"=>$params['target_contact_id']));
			}
			
			#check if participant available has just been set
			if (is_participant_available($params)) {
				#invoke the BRISSkit 'participant_available' hook
				$results = module_invoke_all("participant_available",$params,$id);
				$triggered = check_results($results);
			}
			#if participant has just replied invoke the BRISSkit 'letter_response' hook
			if (is_participant_reply_positive($params)) {
				drupal_set_message("Potential participant replied");
				$results = module_invoke_all("letter_response",$params);
				$triggered = check_results($results);
			}
			
			#if consent was given for this Activity (ie. status is Accepted)
			if (is_consent_level_accepted($params)) {
				#check that the ActivityType is part of the case definition if not exit hook
				$activity_type = get_activity_type_name($params['activity_type_id']);
				if (!case_allows_activity($params['case_id'], $activity_type)) return;
				drupal_set_message("'$activity_type' was Accepted");
				
				#invoke the BRISSkit 'consent_success' hook
				$results = module_invoke_all("consent_success",$activity_type,$params);
				$triggered = check_results($results);
				
			}
		}
		catch(Exception $ex) {
			drupal_set_message($ex->getMessage(),"error");	
		}
	}
	
}

#implement civi's civicrm_post db write hook
function brisskit_civicrm_post( $op, $objectName, $objectId, &$objectRef ) {
	global $prev_stat_id;
	global $triggered;
	if ($objectName=="GroupContact" || $objectName=='Individual') {
		log_status_if_required($objectId,$op,$prev_stat_id);
	}
	
	#when work flow has been triggered need to set the wf_trigger flag to 1
	if ($triggered) {
		set_activity_triggered($objectId);
		$triggered=false;
	}
}

#implement BRISSkit participant available to be contacted hook
# 3.1. Automatically creates activities defined in the contact_participant ActivitySet of the civicase XML 
function brisskit_participant_available($params, $activity_id) {
	#add activities related to contacting participant to case
	
	# 3.2. Changes participant status to ‘In study’
	if (add_activity_set_to_case($params['case_id'],"contact_participant",$params['source_contact_id'])) {
		$case_id = $params['case_id'];
		$case_type = get_case_type($case_id);
		set_contact_status_via_case($case_id, "In study","Status changed to 'In study' ($case_type) when availability confirmed.");

		drupal_set_message("Activities now scheduled to contact potential participant re. study enrolment");
		drupal_set_message("Participant status changed to 'In study'");
		return true;   
	}
}

#implement civi's civicrm_import hook (called following import of each individual)
function brisskit_civicrm_import( $object, $usage, &$objectRef, &$params ) {
	require_once "api/v3/utils.php";
	require_once "api/v3/Case.php";
	
	#determine if an initial study has been supplied in the import fields and if so add the participant to that initial study
	if (is_participant_in_initial_study($params)) {
		set_custom_field("permission_given",1,$params);
		add_participant_to_initial_study($params);
	}
}

